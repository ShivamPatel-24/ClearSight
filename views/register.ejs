<%- include('partials/header') %>


  <div align="Center">
    <img src="/logo.png" width="300" height="300" />
  </div>

  <form action="/register" method="post" class="my-0">
    <div class="border border-5 shadow bg-white rounded" style="margin: 3% 32% 5% 32%; padding: 5% 5%">
      <div class="form-group ">
        <label for="email">Email</label>
        <input type="email" class="form-control" name="email" required placeholder="enter your email address">
      </div>
      <div class="form-group my-3">
        <label for="companyName">Company</label>
        <input type="text" class="form-control" name="companyName" required placeholder="enter your company name">
      </div>
      <div class="form-group my-3">
        <label for="username">Name</label>
        <input type="text" class="form-control" name="username" required placeholder="enter your name">
      </div>
      <div class="form-group my-3">
        <label for="password">Password</label>
        <input type="password" class="form-control" minlength="4" maxlength="16" name="password" required
          placeholder="enter password">
      </div>
      <div class="form-group mt-5">
        <button type="submit" class="form-control btn btn-dark">Register</button>
      </div>
      <p class="text-center my-3">OR</p>
      <div class="card social-block mt-3">
        <a class="btn btn-block btn-social btn-microsoft text-center" href="/auth/microsoft" role="button">
          <i class="fab fa-microsoft w-25"></i>
          Sign Up with Microsoft
        </a>
      </div>
    </div>

  </form>

<!-- Temporary setup for rasa webchat widget and TTS integration with chatbot -->
<!-- Will likely need to split this into its own files -->
<div id="webchat"></div>
<script>

// Uses SpeechSynthesis to create audio from text input
function speak(text) {
  console.log("speak called with text:", text);
  const speech = new SpeechSynthesisUtterance(text);
  return new Promise((resolve, reject) => {
    speech.onend = () => {
      console.log('Speech ended.');
      resolve();
    };
    speech.onerror = (event) => {
      console.error('Speech error:', event.error);
      reject(event.error);
    };
    window.speechSynthesis.speak(speech);
  });
}



// rasa webchat widget usage - https://github.com/botfront/rasa-webchat
!(function () {
  let e = document.createElement("script"),
    t = document.head || document.getElementsByTagName("head")[0];
  (e.src =
    "https://cdn.jsdelivr.net/npm/rasa-webchat@1.0.1/lib/index.js"),
    // Replace 1.x.x with the version that you want
    (e.async = !0),
    (e.onload = () => {
      window.WebChat.default(
        {
          customData: { language: "en" },
          socketUrl: "http://localhost:5005",
          socketPath: "/socket.io/",
          params: {"storage":"session"},

          // triggers TTS on chatbot response
          onSocketEvent:{
            'bot_uttered': async (event) => {
            console.log("onsocketEvent occurred");
            if (event.text) {
              await speak(event.text);
            }
          },

            'connect': () => console.log('connection established'),
          
          },
 
          //embedded: true,
          // add other props here
        },
        null
      );
    }),
    t.insertBefore(e, t.firstChild);
})();

</script>


  <%- include('partials/footer') %>